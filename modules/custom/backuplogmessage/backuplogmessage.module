<?php
/**
 * @file(backuplogmessage.module)
 */

/**
 * Creates a log message node if the form value is not empty.
 * We check if this node type exists in the hook_install of this module.
 */
function _create_backup_log_message(&$form, &$form_state) {

  if (!empty($form_state['values']['log_message']['value'])) {

    $node = new stdClass(); // we create a new node object
    $node->type = 'backup_log_entry';
    $node->title = date('l, F jS, Y');
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node); // set default values
    $node->uid = 1; // any user id you wish, really

    $node->body[$node->language][0]['format'] = 'filtered_html';
    $node->body[$node->language][0]['summary'] = 'Changelog entry created: '.date('l, F jS, Y');
    $node->body[$node->language][0]['value'] = $form_state['values']['log_message']['value'];

    $node = node_submit($node); // prepare node for a submit
    node_save($node); // after this call we get a nid

    drupal_set_message('Created new Backup Log Entry, dated: <strong>'.$node->title.'</strong>');

  } else { // log message value is empty string

    drupal_set_message(t('You did not enter any text in the Log Message text box, so no Log Message node was created.'), 'status', FALSE);

  }

} // _create_backup_log_message()

/**
 * Implements hook_form_alter()
 * Alters the backup and migrate "quick" form.
 * Adds a feild for a log message.
 */
function backuplogmessage_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'backup_migrate_ui_manual_restore_form') {

    // some reminders and todo's after a successful restore of the curriculum site
    drupal_set_message('<p><strong>NOTE:</strong> <u>Things to do after a successful restore of the curriculum site</u>:</p><ul>
      <li><input type="checkbox"> Check and <a target="_blank" href="/admin/appearance/settings/curriculum">fix</a> the theme if needed (the Colors Module may have messed it up).</li>
      <li><input type="checkbox"> <a href="/admin/config/system/cron" target="_blank">Run seach_cron a whole bunch</a> so that <a href="/admin/config/search/settings" target="_blank">indexing status</a> reaches 100%.</li>
      <li><input type="checkbox"> Let Mike and Rebecca know that there is new content on the site so that they can add a notice to the newsletter.</li>
    </ul>', 'status', FALSE);

  }

  if ($form_id == 'backup_migrate_ui_manual_quick_backup_form' || $form_id == 'backup_migrate_ui_manual_backup_form') {

    drupal_set_message('<p><strong>NOTE:</strong> <u>Things to before a backup and migrate of the curriculum site</u>:</p><ul>
      <li><input type="checkbox"> Migrate/move new files (rsync) to destination enviroment.</li>
      <li><input type="checkbox"> Backup both enviroments (via Backup and Migrate module) and keep copies locally.</li>
      <li><input type="checkbox"> Optional: <a href="/node/2445/webform-results" target="_blank">Backup feedback form results</a> to O:\Branches\File_Transfer\curriculum project\archive\feedback</li>
    </ul>');

    // $form['log_message'] = array(
    //   '#title' => t('Log Message (optional)'),
    //   '#description' => t('Enter an optional log message to associate with this backup/restore. Leaving this field blank, will not create a new Log Message node.'),
    //   '#type' => 'text_format',
    //   '#required' => FALSE,
    // );

    //  the following is just for testing...
    // $form['manually_create_log_message'] = array(
    //   '#type' => 'submit',
    //   '#value' => t('Manually Test Stuff'),
    //   '#suffix' => '<div>'.t('Normally, this action is automated... This is for testing only.').'</div><br><br>',
    //   '#submit' => array('_dpm_stuff'), // '_backup_migrate_ui_backup_settings_form_submit'
    // );

    // place our function at the start of the list of functions to fire on form submit
    // on the submit of the 'quick backup' form (backup and migrate module). Note: this submit fires via AJAX.
    // array_unshift($form['#submit'], '_create_backup_log_message');

  } // form_id == backup_migrate_ui_manual_quick_backup_form

} // backuplogmessage_form_alter()

// this function is just for testing...
function _dpm_stuff(&$form, &$form_state) {
  file_put_contents(getcwd().'/'.drupal_get_path('module', 'backuplogmessage').'/debug.txt', print_r($form_state['values'], true));
}
